
# Generated by CodiumAI
import numpy
from unittest.mock import patch
from principal_rbm_alpha import ALPHA_DIGIT_PATH
from principal_rbm_alpha import _load_data, read_alpha_digit


import pytest

class Test_LoadData:

    # Loads Binary AlphaDigits data from a .mat file.
    def test_load_binary_alphadigit_data(self):
        # Arrange
        file_path = "path/to/file.mat"
    
        # Act
        data = _load_data(file_path, which="alphadigit")
    
        # Assert
        assert isinstance(data, dict)
        assert "dat" in data
        assert isinstance(data["dat"], np.ndarray)

    # Raises ValueError if file_path is None.
    def test_raises_value_error_if_file_path_is_none(self):
        # Arrange
        file_path = None
    
        # Act & Assert
        with pytest.raises(ValueError):
            _load_data(file_path)

class TestReadAlphaDigit:

    # Function reads data from file and returns flattened images for specified character
    def test_file_path_none(self):
        # Initialize the test data
        characters = ["A", "B"]
        file_path = None
        data = {"A": np.array([[1, 2, 3], [4, 5, 6]]), "B": np.array([[7, 8, 9], [10, 11, 12]])}
    
        # Mock the _load_data function
        with patch.object(module_name, "_load_data", return_value=data) as mock_load_data:
            # Call the function under test
            result = read_alpha_digit(characters, file_path)
        
            # Assert the result
            expected_result = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
            assert np.array_equal(result, expected_result)
        
            # Assert that _load_data was not called
            mock_load_data.assert_not_called()

    # Function can extract data for multiple characters at once
    def test_extract_data_for_multiple_characters(self):
        # Initialize the test data
        characters = ["A", "B"]
        file_path = ALPHA_DIGIT_PATH
        data = {"A": np.array([[1, 2, 3], [4, 5, 6]]), "B": np.array([[7, 8, 9], [10, 11, 12]])}

        # Mock the _load_data function
        with patch.object(module_name, "_load_data", return_value=data) as mock_load_data:
            # Call the function under test
            result = read_alpha_digit(characters, file_path)
    
            # Assert the result
            expected_result = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
            assert np.array_equal(result, expected_result)
    
            # Assert that _load_data was called with the correct arguments
            mock_load_data.assert_called_once_with(file_path, which="alphadigit")

    # Function can extract data for a single character using its index or alphanumeric representation
    def test_extract_data_single_character(self):
        # Initialize the test data
        characters = ["A"]
        file_path = "path/to/file.mat"
        data = {"A": np.array([[1, 2, 3], [4, 5, 6]])}

        # Mock the _load_data function
        with patch.object(module_name, "_load_data", return_value=data) as mock_load_data:
            # Call the function under test
            result = read_alpha_digit(characters, file_path)
    
            # Assert the result
            expected_result = np.array([[1, 2, 3], [4, 5, 6]])
            assert np.array_equal(result, expected_result)
    
            # Assert that _load_data was called with the correct file path
            mock_load_data.assert_called_once_with(file_path, which="alphadigit")

    # Function flattens each image into a one-dimensional vector
    def test_flatten_images(self):
        # Initialize the test data
        characters = ["A", "B"]
        file_path = ALPHA_DIGIT_PATH
        data = {"A": np.array([[1, 2, 3], [4, 5, 6]]), "B": np.array([[7, 8, 9], [10, 11, 12]])}

        # Mock the _load_data function
        with patch.object(module_name, "_load_data", return_value=data) as mock_load_data:
            # Call the function under test
            result = read_alpha_digit(characters, file_path)
    
            # Assert the result
            expected_result = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
            assert np.array_equal(result, expected_result)
    
            # Assert that _load_data was called with the correct arguments
            mock_load_data.assert_called_once_with(file_path, which="alphadigit")

    # Function can use already loaded data if specified
    def test_use_already_loaded_data(self):
        # Initialize the test data
        characters = ["A", "B"]
        file_path = None
        data = {"A": np.array([[1, 2, 3], [4, 5, 6]]), "B": np.array([[7, 8, 9], [10, 11, 12]])}

        # Mock the _load_data function
        with patch.object(module_name, "_load_data", return_value=data) as mock_load_data:
            # Call the function under test
            result = read_alpha_digit(characters, file_path, use_data=True)
    
            # Assert the result
            expected_result = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
            assert np.array_equal(result, expected_result)
    
            # Assert that _load_data was not called
            mock_load_data.assert_not_called()